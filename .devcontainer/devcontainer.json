// This file defines how vscode will work with a docker container to
// present your build environment.
// Info at https://containers.dev/implementors/json_reference/
//
{
	"name": "infinitime_devcontainer",
	"build": {
		// This refers to the dockerfile in this directory.
		"dockerfile": "Dockerfile"
	},
	// Security options required to enable cpp debugging
	"capAdd": [
		"SYS_PTRACE"
	],
	"securityOpt": [
		"seccomp=unconfined"
	],
	// Mount the repository into /sources in the container
	"workspaceMount": "source=${localWorkspaceFolder},target=/sources,type=bind",
	"workspaceFolder": "/sources",
	"mounts": [
		// These volumes store the vscode-specific stuff, and allow us
		// to persist them across sessions rather than reinstalling them
		// every time.
		"source=vscode-devcon-infinitime,target=/home/infinitime/.vscode-server/extensions,type=volume",
		"source=vscode-devcon-infinitime-insiders,target=/home/infinitime/.vscode-server-insiders/extensions,type=volume",
		// Bind-mount the current build.sh in case it's newer than the one in the builder image.
		"source=${localWorkspaceFolder}/docker/build.sh,target=/opt/build.sh,type=bind"
	],
	// Set *default* container specific settings.json values on container create.
	"settings": {
		"terminal.integrated.shell.linux": "/bin/bash",
		"editor.formatOnSave": true,
		"clang-format.executable": "clang-format-12"
	},
	// Add the IDs of extensions you want installed when the container is created.
	"extensions": [
		"ms-vscode.cpptools",
		// this gets in the way of build.sh: "ms-vscode.cmake-tools",
		"marus25.cortex-debug",
		"notskm.clang-tidy",
		"mjohns.clang-format"
	],
	// For linux we need to ensure the UID is mapped to match the local user
	// so that files created during the build end up belonging to the local user.
	"containerUser": "infinitime",
	"updateRemoteUserUID": true
}
