if(DEFINED ENABLE_USERAPPS)
    set(USERAPP_TYPES ${ENABLE_USERAPPS} CACHE STRING "List of user apps to build into the firmware")
else ()
    set(DEFAULT_USER_APP_TYPES "Apps::StopWatch")
    set(DEFAULT_USER_APP_TYPES "${DEFAULT_USER_APP_TYPES}, Apps::Alarm")
    set(DEFAULT_USER_APP_TYPES "${DEFAULT_USER_APP_TYPES}, Apps::Timer")
    set(DEFAULT_USER_APP_TYPES "${DEFAULT_USER_APP_TYPES}, Apps::Steps")
    set(DEFAULT_USER_APP_TYPES "${DEFAULT_USER_APP_TYPES}, Apps::HeartRate")
    set(DEFAULT_USER_APP_TYPES "${DEFAULT_USER_APP_TYPES}, Apps::Music")
    set(DEFAULT_USER_APP_TYPES "${DEFAULT_USER_APP_TYPES}, Apps::Paint")
    set(DEFAULT_USER_APP_TYPES "${DEFAULT_USER_APP_TYPES}, Apps::Paddle")
    set(DEFAULT_USER_APP_TYPES "${DEFAULT_USER_APP_TYPES}, Apps::Twos")
    set(DEFAULT_USER_APP_TYPES "${DEFAULT_USER_APP_TYPES}, Apps::Dice")
    set(DEFAULT_USER_APP_TYPES "${DEFAULT_USER_APP_TYPES}, Apps::Metronome")
    set(DEFAULT_USER_APP_TYPES "${DEFAULT_USER_APP_TYPES}, Apps::Navigation")
    set(DEFAULT_USER_APP_TYPES "${DEFAULT_USER_APP_TYPES}, Apps::Weather")
    #set(DEFAULT_USER_APP_TYPES "${DEFAULT_USER_APP_TYPES}, Apps::Motion")
    set(USERAPP_TYPES "${DEFAULT_USER_APP_TYPES}" CACHE STRING "List of user apps to build into the firmware")
endif ()

if(DEFINED ENABLE_WATCHFACES)
    set(DEFAULT_WATCHFACE_TYPES ${ENABLE_WATCHFACES})
else ()
    list(APPEND DEFAULT_WATCHFACE_TYPES "Pinetime::Applications::Screens::WatchFaceDigital")
    list(APPEND DEFAULT_WATCHFACE_TYPES "Pinetime::Applications::Screens::WatchFaceAnalog")
    list(APPEND DEFAULT_WATCHFACE_TYPES "Pinetime::Applications::Screens::WatchFacePineTimeStyle")
    list(APPEND DEFAULT_WATCHFACE_TYPES "Pinetime::Applications::Screens::WatchFaceTerminal")
    list(APPEND DEFAULT_WATCHFACE_TYPES "Pinetime::Applications::Screens::WatchFaceInfineat")
    list(APPEND DEFAULT_WATCHFACE_TYPES "Pinetime::Applications::Screens::WatchFaceCasioStyleG7710")
endif ()

# Generate the list of watchface types necessary to instantiate WatchFaceTypeList<> needed in WatchFace.h
set(FIRST_ITERATION TRUE)
foreach (watchface IN LISTS DEFAULT_WATCHFACE_TYPES)
    if (${FIRST_ITERATION})
        string(APPEND WATCHFACE_TYPES "${watchface}")
        set(FIRST_ITERATION FALSE)
    else ()
        string(APPEND WATCHFACE_TYPES ", ${watchface}")
    endif ()
endforeach ()

# Generate the forward declarations needed in WatchFace.h
foreach (w IN LISTS DEFAULT_WATCHFACE_TYPES)
    string(FIND ${w} "::" classIndex REVERSE)
    string(LENGTH ${w} watchfaceFullLength)
    math(EXPR watchfaceLength "${watchfaceFullLength} - (${classIndex} + 2)")
    math(EXPR beginIndex "${classIndex}+2")
    string(SUBSTRING ${w} ${beginIndex} ${watchfaceLength} className)
    string(SUBSTRING ${w} 0 ${classIndex} namespaceName)
    string(APPEND WATCHFACE_NAMESPACE "namespace ${namespaceName} { class ${className}; }\n")

    # TODO the include path should be specified by the CMake file of the watchface
    string(APPEND WATCHFACE_INCLUDE "#include \"displayapp/screens/${className}.h\"\n")
endforeach ()

add_library(infinitime_apps INTERFACE)
target_sources(infinitime_apps INTERFACE "${CMAKE_CURRENT_BINARY_DIR}/Apps.h")
target_include_directories(infinitime_apps INTERFACE "${CMAKE_CURRENT_BINARY_DIR}/")
target_include_directories(infinitime_apps INTERFACE "${CMAKE_CURRENT_BINARY_DIR}/../")

# Generate the list of user apps to be compiled into the firmware
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/Apps.h.in ${CMAKE_CURRENT_BINARY_DIR}/Apps.h)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/WatchFaces.h.in ${CMAKE_CURRENT_BINARY_DIR}/WatchFaces.h)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/../UserApps.h.in ${CMAKE_CURRENT_BINARY_DIR}/../UserApps.h)
