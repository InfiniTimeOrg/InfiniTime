name: Build firmware (Guardian Beacon)

on:
  workflow_dispatch: {}
  push:
    branches: [ main ]
    paths-ignore:
      - ".github/workflows/docker.yml"
      - "README.md"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Show tree (debug)
        run: |
          git submodule status || true
          ls -la

      - name: Build with our Docker image
        run: |
          docker run --rm -v "${{ github.workspace }}:/src" ghcr.io/koman10/guardian-beacon:latest bash -lc '
            set -euxo pipefail
            cd /src

            # [WAŻNE] Jeżeli repo to fork InfiniTime – nic nie zmieniaj.
            # Obraz zawiera toolchain + SDK + skrypty.

            # Czy mamy skrypt budujący z repo InfiniTime?
            if [ -x scripts/build.sh ]; then
              # Standardowy sposób na InfiniTime:
              # -t pinetime -> target PineTime
              # -r         -> Release
              ./scripts/build.sh -t pinetime -r
              # Po zakończeniu artefakty zwykle są w ./build
            else
              # Fallback: „klasyczny” CMake/Ninja
              cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=Release -DTARGET_DEVICE=PINETIME
              cmake --build build -j"$(nproc)"
            fi

            echo "== Zawartość build =="
            ls -lh build || true
            ls -lh build/*.bin build/*.hex build/*.zip 2>/dev/null || true
          '

      - name: Upload firmware artifacts
        uses: actions/upload-artifact@v4
        with:
          name: guardian-firmware
          path: |
            build/*.bin
            build/*.hex
            build/*.zip
            build/*.out
          if-no-files-found: warn
